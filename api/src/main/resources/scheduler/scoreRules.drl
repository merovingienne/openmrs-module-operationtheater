package scheduler;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.openmrs.module.operationtheater.scheduler.domain.PlannedSurgery;
import org.openmrs.module.operationtheater.scheduler.domain.Anchor;
import org.openmrs.module.operationtheater.scheduler.solver.SurgeryConflict;

import java.util.Date;

import java.time.ZonedDateTime;
import java.time.Duration;
import java.time.ZoneId;
import org.threeten.extra.Interval;


global HardSoftScoreHolder scoreHolder;

// Optaplanner 6.0.1.Final doesn't support chained and nullable planning variables
// As a workaround a "null"-Anchor has been created with location=null
// All planning entities that have a location==null are considered unscheduled and must be excluded
// form score calculation - exception: rule preventUnscheduledSurgeriesIfTimeLeft

// ############################################################################
// Hard constraints
// ############################################################################


//Operation Theater occupancy: two PlannedSurgeries in the same Location with overlapping periods
rule "overlappingSurgeriesInSameOperationTheater"
    when
        $left: PlannedSurgery($location: location, location != null)
        $right: PlannedSurgery(this != $left, location == $location, isOverlapping($left))

        //prevent the double execution of this rule (AB, BA)
        eval( System.identityHashCode($left) < System.identityHashCode($right))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

////It is not allowed to have surgeries outside available times

rule "surgeriesOutsideAvailableTimes"
    when
        PlannedSurgery(isOutsideAvailableTimes(), location != null)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//It is not allowed to have unscheduled surgeries if there are OTs within the planning window that are not fully utilized

rule "preventUnscheduledSurgeriesIfTimeLeft"
    when
        $surgery: PlannedSurgery(location == null, $procedure: surgery.procedure)
        Anchor(getRemainingTime() >= $procedure.otPreparationDuration + $procedure.interventionDuration)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


// Two overlapping PlannedSurgeries that share the same persons.

rule "conflictingAndOverlappingPlannedSurgeries"
    when
        $conflict : SurgeryConflict($leftSurgery : left, $rightSurgery : right)
        $left: PlannedSurgery($leftSurgery == surgery, location != null)
        PlannedSurgery($rightSurgery == surgery, location != null, isOverlapping($left))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -$conflict.getNumberOfPersons());
end

//// ############################################################################
//// Soft constraints
//// ############################################################################

rule "firstComeFirstServed"
    when
        $surgery: PlannedSurgery($start : start, start != null, location != null)
    then
        ZonedDateTime $created = ZonedDateTime.ofInstant($surgery.getSurgery().getDateCreated().toInstant(), ZoneId.systemDefault());
        int hours = Duration.between($created, $start).toHours();

        scoreHolder.addSoftConstraintMatch(kcontext, -hours);
end
